"use strict";
// Loosely based on https://github.com/silkyland/object-to-formdata/blob/master/index.js
Object.defineProperty(exports, "__esModule", { value: true });
exports.formDataHelper = void 0;
const formdata_node_1 = require("formdata-node");
const formDataHelper = (obj, formData, namespace) => {
    const fd = formData || new formdata_node_1.FormData();
    // Handle primitive types and File/Blob objects at the root
    if (namespace && (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean'
        || (typeof obj === "object" && obj instanceof formdata_node_1.Blob))) {
        fd.append(namespace, obj);
    }
    else {
        for (const property in obj) {
            let formKey;
            if (obj[property]) {
                if (namespace) {
                    formKey = namespace + "." + property;
                }
                else {
                    formKey = property;
                }
                // Handle arrays 
                if (Array.isArray(obj[property])) {
                    const arrayItems = obj[property];
                    arrayItems.forEach((item, index) => exports.formDataHelper(item, fd, `${formKey}[${index}]`));
                }
                // Handle objects that are not files or blobs by recursively calling FormDataHelper
                else if (typeof obj[property] === "object" &&
                    !(obj[property] instanceof formdata_node_1.Blob)) {
                    exports.formDataHelper(obj[property], fd, formKey);
                }
                else {
                    // Handle all primitives and File/Blob objects
                    fd.append(formKey, obj[property]);
                }
            }
        }
    }
    return fd;
};
exports.formDataHelper = formDataHelper;
//# sourceMappingURL=formDataHelper.js.map