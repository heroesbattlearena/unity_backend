/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NativeToken721MarketInterface extends ethers.utils.Interface {
  functions: {
    "UPGRADER_ROLE()": FunctionFragment;
    "activeItems()": FunctionFragment;
    "cancelListing(uint256)": FunctionFragment;
    "getFeesAddress()": FunctionFragment;
    "getSaleFeePercentage()": FunctionFragment;
    "initialize(address,uint256,address)": FunctionFragment;
    "itemById(uint256)": FunctionFragment;
    "listItem(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "purchaseItem(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeesAddress(address)": FunctionFragment;
    "setSaleFeesPercentage(uint256)": FunctionFragment;
    "totalListings()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usersListingIds(address)": FunctionFragment;
    "usersListings(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeesAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "itemById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleFeesPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usersListingIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usersListings",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleFeesPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersListingIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersListings",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ItemCancelled(uint256,address)": EventFragment;
    "ItemListed(uint256,address)": EventFragment;
    "ItemSold(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type ItemCancelledEvent = TypedEvent<
  [BigNumber, string] & { itemId: BigNumber; owner: string }
>;

export type ItemListedEvent = TypedEvent<
  [BigNumber, string] & { itemId: BigNumber; seller: string }
>;

export type ItemSoldEvent = TypedEvent<
  [BigNumber, string] & { itemId: BigNumber; buyer: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class NativeToken721Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NativeToken721MarketInterface;

  functions: {
    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    activeItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          price: BigNumber;
          listedPercentage: BigNumber;
        })[]
      ]
    >;

    cancelListing(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeesAddress(overrides?: CallOverrides): Promise<[string]>;

    getSaleFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      feesAddress: string,
      saleFeePercentage: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    itemById(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          price: BigNumber;
          listedPercentage: BigNumber;
        }
      ]
    >;

    listItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesAddress(
      newFeesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleFeesPercentage(
      newSaleFeesPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalListings(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usersListingIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    usersListings(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          price: BigNumber;
          listedPercentage: BigNumber;
        })[]
      ]
    >;
  };

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  activeItems(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      price: BigNumber;
      listedPercentage: BigNumber;
    })[]
  >;

  cancelListing(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeesAddress(overrides?: CallOverrides): Promise<string>;

  getSaleFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    feesAddress: string,
    saleFeePercentage: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  itemById(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      price: BigNumber;
      listedPercentage: BigNumber;
    }
  >;

  listItem(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  purchaseItem(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesAddress(
    newFeesAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleFeesPercentage(
    newSaleFeesPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalListings(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usersListingIds(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  usersListings(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      price: BigNumber;
      listedPercentage: BigNumber;
    })[]
  >;

  callStatic: {
    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    activeItems(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        price: BigNumber;
        listedPercentage: BigNumber;
      })[]
    >;

    cancelListing(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFeesAddress(overrides?: CallOverrides): Promise<string>;

    getSaleFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      feesAddress: string,
      saleFeePercentage: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    itemById(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        price: BigNumber;
        listedPercentage: BigNumber;
      }
    >;

    listItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeesAddress(
      newFeesAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleFeesPercentage(
      newSaleFeesPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalListings(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usersListingIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    usersListings(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string, BigNumber, BigNumber] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        price: BigNumber;
        listedPercentage: BigNumber;
      })[]
    >;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "ItemCancelled(uint256,address)"(
      itemId?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; owner: string }
    >;

    ItemCancelled(
      itemId?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; owner: string }
    >;

    "ItemListed(uint256,address)"(
      itemId?: null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; seller: string }
    >;

    ItemListed(
      itemId?: null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; seller: string }
    >;

    "ItemSold(uint256,address)"(
      itemId?: null,
      buyer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; buyer: string }
    >;

    ItemSold(
      itemId?: null,
      buyer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; buyer: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    activeItems(overrides?: CallOverrides): Promise<BigNumber>;

    cancelListing(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      feesAddress: string,
      saleFeePercentage: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    itemById(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesAddress(
      newFeesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleFeesPercentage(
      newSaleFeesPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalListings(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usersListingIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersListings(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelListing(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      feesAddress: string,
      saleFeePercentage: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    itemById(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesAddress(
      newFeesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleFeesPercentage(
      newSaleFeesPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usersListingIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersListings(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
